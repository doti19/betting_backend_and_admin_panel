const Match=require("../models/matchModel");const League=require("../models/leagueModel");const catchAsync=require("../utils/catchAsync");const AppError=require("../utils/appError");const ApiFeatures=require("../utils/apiFeatures");const multer=require("multer");const path=require("path");const moment=require("moment");const fs=require("fs");const factory=require("./handlerFactory");const multerStorage=multer.diskStorage({destination:(req,file,cb)=>{cb(null,"public/json/");},filename:(req,file,cb)=>{const ext=file.mimetype.split("/")[1];cb(null,`${file.originalname}.${ext}`);},});const multerFilter=(req,file,cb)=>{if(file.mimetype.startsWith("application/json")){cb(null,true);}else{cb(new AppError("Not a json file! Please upload only json files.",400),false);}};const upload=multer({storage:multerStorage,fileFilter:multerFilter,});exports.uploadLeague=upload.single("matchFile");exports.registerMatch=catchAsync(async(req,res,next)=>{let games;const league=await League.findById(req.body.leagueName);if(!league){next(new AppError("No league found with that id",404));}else{const leagueId=req.body.leagueName;const matchFile=req.file.filename;const p=path.join("public","json",matchFile);const data=fs.readFileSync(p,"utf-8");const matches=JSON.parse(data);const oldMatches=await Match.remove({leagueId:leagueId});try{for(let i=0;i<matches.length;i++){let match=matches[i];let splitter=match.title.split(" Vs ");const splitDateFormatted=match.date.split(" ");let formattedDate=splitDateFormatted[0];let game={title:match.title,date:match.date,team1Name:splitter[0],team2Name:splitter[1],prediction:[],specialOdds:[],};let predictions=match.prediction;for(let i=0;i<predictions.length;i++){let prediction=predictions[i];let po={name:Object.keys(prediction)[0],};let odds=[];let p=prediction[po.name];let oddKeys=Object.keys(p);for(let j=0;j<oddKeys.length;j++){let odd={};let oddKey=oddKeys[j];odd.choice=oddKey;odd.odd=p[oddKey];odds.push(odd);}
po.odds=odds;game.prediction.push(po);}
for(let i=0;i<game.prediction.length;i++){if(game.prediction[i].name=="3 Way"){for(let k=0;k<game.prediction[i].odds.length;k++){let tempOdds={};if(game.prediction[i].odds[k].choice=="1"){tempOdds.choice=game.prediction[i].odds[k].choice;tempOdds.odd=game.prediction[i].odds[k].odd;team1Odd=game.prediction[i].odds[k].odd;}
if(game.prediction[i].odds[k].choice=="2"){tempOdds.choice=game.prediction[i].odds[k].choice;tempOdds.odd=game.prediction[i].odds[k].odd;team2Odd=game.prediction[i].odds[k].odd;}
if(game.prediction[i].odds[k].choice=="X"){tempOdds.choice=game.prediction[i].odds[k].choice;tempOdds.odd=game.prediction[i].odds[k].odd;equalOdd=game.prediction[i].odds[k].odd;}
game.specialOdds.push(tempOdds);}}}
games=await Match.create({leagueId:leagueId,leagueName:league.title,formattedDate:formattedDate,matchFile:matchFile,matchDetail:game,});}
res.status(201).json({status:"success",message:"Matches uploaded successfully",Games:games,});}catch(err){return next(new AppError(err,400));}}});exports.searchMatch=catchAsync(async(req,res,next)=>{let filter={};const features=new ApiFeatures(Match.find({"matchDetail.title":new RegExp(`${req.query.q}`,"i"),}),req.query).sort().limitFields().paginate();const match=await features.query;if(!match){return next(new AppError("No match found",404));}
res.status(200).json({status:"success",match,});});exports.decreaseBetOddPercentage=catchAsync(async(req,res,next)=>{const allAvailableMatchesList=await Match.find({status:"pending"});const percentage=req.body.percent;if(percentage!=""){for(let i=0;i<allAvailableMatchesList.length;i++){let matchesPrediction=allAvailableMatchesList[i].matchDetail.prediction;let game={title:allAvailableMatchesList[i].matchDetail.title,date:allAvailableMatchesList[i].matchDetail.date,prediction:[],};const sampleFile={status:allAvailableMatchesList[i].status,leagueId:allAvailableMatchesList[i].leagueId,formatedDate:allAvailableMatchesList[i].formatedDate,matchDetail:game,createdAt:allAvailableMatchesList[i].createdAt,};for(let j=0;j<matchesPrediction.length;j++){let po={_id:matchesPrediction[j]._id,name:matchesPrediction[j].name,};let odds=[];let singleMatchOdds=matchesPrediction[j].odds;for(let k=0;k<singleMatchOdds.length;k++){let singleOdd=singleMatchOdds[k].odd;let multiplyPercentage=singleOdd-percentage*singleMatchOdds[k].odd;if(multiplyPercentage<0){multiplyPercentage=0;}
let odd={};odd._id=singleMatchOdds[k]._id;odd.choice=singleMatchOdds[k].choice;odd.odd=multiplyPercentage.toFixed(2);odds.push(odd);}
po.odds=odds;game.prediction.push(po);}
await Match.findByIdAndUpdate(allAvailableMatchesList[i]._id,sampleFile,{new:false,runValidators:true,});}
res.status(200).json({status:"success",message:`successfully decreased all matches odd by ${percentage} percent`,});}else{return next(new AppError("Please enter percentage value",400));}});exports.increaseBetOddPercentage=catchAsync(async(req,res,next)=>{const allAvailableMatchesList=await Match.find({status:"pending"});const percentage=req.body.percent;console.log(percentage);if(percentage){for(let i=0;i<allAvailableMatchesList.length;i++){let matchesPrediction=allAvailableMatchesList[i].matchDetail.prediction;let game={title:allAvailableMatchesList[i].matchDetail.title,date:allAvailableMatchesList[i].matchDetail.date,prediction:[],};const sampleFile={status:allAvailableMatchesList[i].status,leagueId:allAvailableMatchesList[i].leagueId,formatedDate:allAvailableMatchesList[i].formatedDate,matchDetail:game,createdAt:allAvailableMatchesList[i].createdAt,};for(let j=0;j<matchesPrediction.length;j++){let po={_id:matchesPrediction[j]._id,name:matchesPrediction[j].name,};let odds=[];let singleMatchOdds=matchesPrediction[j].odds;for(let k=0;k<singleMatchOdds.length;k++){let singleOdd=singleMatchOdds[k].odd;let multiplyPercentage=singleOdd+percentage*singleMatchOdds[k].odd;let odd={};odd._id=singleMatchOdds[k]._id;odd.choice=singleMatchOdds[k].choice;odd.odd=multiplyPercentage.toFixed(2);odds.push(odd);}
po.odds=odds;game.prediction.push(po);}
await Match.findByIdAndUpdate(allAvailableMatchesList[i]._id,sampleFile,{new:false,runValidators:true,});}
res.status(200).json({status:"success",message:`successfully increased all odds of all matches by ${percentage} percent`,});}else{return next(new AppError("Please enter percentage value",400));}});exports.checkAndUpdateMatchStatus=catchAsync(async(req,res,next)=>{const updateMatchStatus=await Match.find();for(let i=0;i<updateMatchStatus.length;i++){const dateToBeFormatted=updateMatchStatus[i].matchDetail.date;const splitted=dateToBeFormatted.split("/");const styled=`${splitted[0] + "-" + splitted[1] + "-" + splitted[2]} `;const splitHour=styled.split(" ");const styled2=`${splitHour[0] + "T" + splitHour[1]} `;const style3=styled2.split("T");const style4=style3[0].split("-");var lastFormatted=`${
    style4[2] + "/" + style4[1] + "/" + style4[0] + " " + style3[1]
  } `;lastFormatted=lastFormatted.trim();var d=new Date(updateMatchStatus[i].matchDetail.date);var n=d.getTime();const nowDate=moment(Date.now()).format("D/MM/YYYY h:mm");var matchKnownDate=new Date(lastFormatted).getTime();var currentDate=new Date().getTime();if(matchKnownDate<currentDate){let updatedDateOfTheMatch={status:"finished",matchDetail:{title:updateMatchStatus[i].matchDetail.title,date:updateMatchStatus[i].matchDetail.date,prediction:updateMatchStatus[i].matchDetail.prediction,},leagueId:updateMatchStatus[i].leagueName._id,};const updatedmatch=await Match.findByIdAndUpdate(updateMatchStatus[i]._id,updatedDateOfTheMatch,{new:true,runValidators:true,});}
if(matchKnownDate>currentDate){let updatedDateOfTheMatch={status:"pending",matchDetail:{title:updateMatchStatus[i].matchDetail.title,date:updateMatchStatus[i].matchDetail.date,prediction:updateMatchStatus[i].matchDetail.prediction,},leagueId:updateMatchStatus[i].leagueName._id,};const updatedDoc=await Match.findByIdAndUpdate(updateMatchStatus[i]._id,updatedDateOfTheMatch,{new:true,runValidators:true,});}}});exports.countDocuments=catchAsync(async(req,res,next)=>{Match.countDocuments({status:"pending"},function(err,count){res.status(200).json({status:"success",result:count,});if(err){return next(new AppError(err,400));}});next();});exports.getTodayMatch=catchAsync(async(req,res,next)=>{const today=moment(Date.now()).format("D/MM/YY");const matches=await Match.find({formattedDate:today,});res.status(200).json({status:"success",result:matches.length,matches,});});exports.getALLMatchesByLeague=catchAsync(async(req,res,next)=>{const leagueName=req.params.league;const league=await League.findOne({title:leagueName,});if(!league){return next(new AppError("No leagues found",404));}
const leagueId=league._id;const match=await Match.find({leagueId:leagueId,});if(!match){return next(new AppError("No matches found",404));}
res.status(200).json({status:"success",result:match.length,match,});next();});exports.getALLMatchesByLeagueApp=catchAsync(async(req,res,next)=>{const leagueName=req.params.league;const league=await League.findOne({title:leagueName,});if(!league){return next(new AppError("No leagues found",404));}
const leagueId=league._id;const match=await Match.find({leagueId:leagueId,status:"pending"});if(!match){return next(new AppError("No matches found",404));}
res.status(200).json({status:"success",result:match.length,match,});next();});exports.getALLmatchesByLeagueForWeb=factory.getAll(Match);exports.deleteFile=catchAsync(async(req,res,next)=>{const matchId=req.params.id;const match=await Match.findById(matchId);if(!match){return next(new AppError("No matches found",404));}
const p=path.join("public","json",match.matchFile);const data=fs.unlinkSync(p);next();});exports.getAllMatches=catchAsync(async(req,res,next)=>{let filter={};const features=new ApiFeatures(Match.find(filter),req.query).filter().sort().limitFields().paginate();const doc=await features.query;if(!doc){return next(new AppError("No matches found",404));}
res.status(200).json({status:"success",result:doc.length,doc,});next();});exports.updateMatchStatus=catchAsync(async(req,res,next)=>{console.log('saminas')
const matchId=req.params.id;const updatedMatch=Match.findByIdAndUpdate(matchId,{$set:{status:"finished"}});if(!updatedMatch){return next(new AppError("No document found with that ID",404));}
console.log(updatedMatch);res.status(200).json({status:"success",updatedMatch,});});exports.getSinglematches=factory.getOne(Match);exports.updateMatch=factory.updateOne(Match);exports.deleteMatch=factory.deleteOne(Match);