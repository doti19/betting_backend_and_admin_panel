const Result=require("../models/resultModel");const Match=require("../models/matchModel");const Bet=require("../models/betModel");const factory=require("./handlerFactory");const catchAsync=require("../utils/catchAsync");const AppError=require("../utils/appError");exports.registerMatchResult=catchAsync(async(req,res,next)=>{const matchId=req.body.matchId;const checkMatchId=await Result.find({matchId:matchId,});if(checkMatchId.length>0){return next(new AppError("Match result already exists",400));}
const updateMatchStatus=await Match.findById(matchId);const team1FirstHalf=req.body.team1.firstHalf;const team1SecondHalf=req.body.team1.secondHalf;const team2FirstHalf=req.body.team2.firstHalf;const team2SecondHalf=req.body.team2.secondHalf;const totalTeam1goals=Number.parseInt(team1FirstHalf)+Number.parseInt(team1SecondHalf);const totalTeam2goals=Number.parseInt(team2FirstHalf)+Number.parseInt(team2SecondHalf);const team1goals=totalTeam1goals;const team2goals=totalTeam2goals;const totalGoals=Number.parseInt(totalTeam1goals)+Number.parseInt(totalTeam2goals);result=await Result.create({matchId:matchId,leagueId:updateMatchStatus.leagueId,matchTitle:updateMatchStatus.matchDetail.title,totalGoals:totalGoals,team1:{goals:team1goals,firstHalf:team1FirstHalf,secondHalf:team1SecondHalf,},team2:{goals:team2goals,firstHalf:team2FirstHalf,secondHalf:team2SecondHalf,},});if(result){const chceckBetMatchId=await Bet.find({matchId:matchId,});let updatedDateOfTheMatch={status:"finished",matchDetail:{title:updateMatchStatus.matchDetail.title,date:updateMatchStatus.matchDetail.date,prediction:updateMatchStatus.matchDetail.prediction,},leagueId:updateMatchStatus.leagueName._id,};const updatedmatch=await Match.findByIdAndUpdate(updateMatchStatus._id,updatedDateOfTheMatch,{new:true,runValidators:true,});}
res.status(201).json({status:"success",message:"Match result posted successfully",result:result,});});exports.updateMatchResult=catchAsync(async(req,res,next)=>{const matchId=req.body.matchId;const checkMatchId=await Result.find({matchId:matchId,});const team1name=req.body.team1.team1name;const team1FirstHalf=req.body.team1.firstHalf;const team1SecondHalf=req.body.team1.secondHalf;const team2name=req.body.team2.team2name;const team2FirstHalf=req.body.team2.firstHalf;const team2SecondHalf=req.body.team2.secondHalf;const totalteam1goals=Number.parseInt(team1FirstHalf)+Number.parseInt(team1SecondHalf);const totalteam2goals=Number.parseInt(team2FirstHalf)+Number.parseInt(team2SecondHalf);const team1goals=totalteam1goals;const team2goals=totalteam2goals;const totalGoals=Number.parseInt(totalteam1goals)+Number.parseInt(totalteam2goals);result=await Result.findByIdAndUpdate(req.params.id,{matchId:matchId,totalGoals:totalGoals,team1:{goals:team1goals,firstHalf:team1FirstHalf,secondHalf:team1SecondHalf,},team2:{goals:team2goals,firstHalf:team2FirstHalf,secondHalf:team2SecondHalf,},});if(result){const checkBetMatchId=await Bet.find({"game.matchId":matchId,});}
res.status(201).json({status:"success",message:"Match result posted successfully",result:result,});});exports.matchResults=catchAsync(async(req,res,next)=>{const leagueId=req.params.leagueId;const matchResults=await Result.find({leagueId:leagueId});res.status(201).json({status:"success",numOfMatches:matchResults.length,matchResults,leagueId});});exports.getAllMatchResults=factory.getAll(Result);exports.getSingleMatchResult=factory.getOne(Result);exports.deleteMatchResult=factory.deleteOne(Result);