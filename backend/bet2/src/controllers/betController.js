const Bet=require("../models/betModel");const catchAsync=require("../utils/catchAsync");const AppError=require("../utils/appError");const ApiFeatures=require("../utils/apiFeatures");const multer=require("multer");const Match=require("../models/matchModel");const Result=require("../models/resultModel");const factory=require("./handlerFactory");const moment=require("moment");const fs=require("fs");const path=require("path");const generate=require("nanoid/non-secure/generate");exports.checkBet=catchAsync(async(req,res,next)=>{const placedMoney=req.body.placedMoney;let length=+req.body.game.length;console.log(length);if(placedMoney<20){return next(new AppError("The minimum money you can bet on is 20",404));}
let totalOdd=1;let numberOfCheckedBetOdds=0;let checkGameId=[];for(var i=0;i<length;i++){const matchId=req.body.game[i].matchId;console.log(matchId);const singleMatch=await Match.findById(matchId);if(singleMatch.status=="finished"||singleMatch.status=="inProgress"){return next(new AppError("There are finished or matches in progress! please remove them and try again",405));}else{const choice=req.body.game[i].choice;const odd=req.body.game[i].odd;if(checkGameId.length==0){checkGameId.push(req.body.game[i].matchId);}else{const index=checkGameId.find((match)=>match===matchId);if(!index){checkGameId.push(req.body.game[i].matchId);}else{return next(new AppError("duplicated matches are not allowed!",404));}}
totalOdd=totalOdd*odd;if(!singleMatch){return next(new AppError("No match found with that id",404));}
singleMatchPrediction=singleMatch.matchDetail.prediction;for(var j=0;j<singleMatchPrediction.length;j++){for(var k=0;k<singleMatchPrediction[j].odds.length;k++){if(singleMatchPrediction[j].odds[k]._id==req.body.game[i].oddId){numberOfCheckedBetOdds=numberOfCheckedBetOdds+1;if(req.body.game[i].odd==singleMatchPrediction[j].odds[k].odd&&req.body.game[i].choice==singleMatchPrediction[j].odds[k].choice){req.body.game[i].title=singleMatch.matchDetail.title;req.body.game[i].prediction=singleMatchPrediction[j].name;}else{return next(new AppError("some of the bet odds you entered are not valid",404));}}}}}}
const bettedGameLength=length;if(length<3||length>20){return next(new AppError("number of matches to bet should be in less than 20 and greater than 3",404));}
if(numberOfCheckedBetOdds!=bettedGameLength){return next(new AppError("Some of the bet odd are not valid",404));}
req.body.totalOdd=totalOdd;req.body.prizeMoney=totalOdd*placedMoney;console.log(placedMoney);next();});exports.countDocuments=catchAsync(async(req,res,next)=>{Bet.countDocuments(function(err,count){res.status(200).json({status:"success",result:count,});if(err){return next(new AppError(err,400));}});});exports.createBet=catchAsync(async(req,res,next)=>{const formattedDate=moment(Date.now()).format("MMMM D, YYYY h:mm:ss A");const dateOnly=moment(Date.now()).format("DD-MM-YYYY");const placedMoney=req.body.placedMoney;var prizeMoney;if(req.body.prizeMoney>25000){return next(new AppError("maximum prize money allowed is 25000"));}else{prizeMoney=req.body.prizeMoney.toFixed(2);}
const totalOdd=req.body.totalOdd.toFixed(2);let userName=req.body.userName;if(userName==''||userName==undefined){userName="no_name";}
const game=req.body.game;let result=[];const firstBet=await Bet.create({userName:userName,placedMoney:placedMoney,prizeMoney:prizeMoney,totalOdd:totalOdd,momentDate:formattedDate,momentDateOnly:dateOnly,game:game,});const bet=await Bet.findById(firstBet._id);if(!bet){return next(new AppError("No bets found",404));}
for(let i=0;i<game.length;i++){const singleMatchId=game[i].matchId;const singleMatchResult=await Result.find({matchId:singleMatchId,});if(singleMatchResult[0]==null){result.push({});}else{result.push(singleMatchResult[0]);}}
res.status(201).json({status:"success",bet,result,});});exports.getBetsByDate=catchAsync(async(req,res,next)=>{const theDate=req.params.date;const betsFilteredByDate=await Bet.find({momentDateOnly:theDate,});var totalPlacedMoney=0;for(var i=0;i<betsFilteredByDate.length;i++){totalPlacedMoney=totalPlacedMoney+betsFilteredByDate[i].placedMoney;}
res.status(200).json({status:"success",result:betsFilteredByDate.length,totalPlacedMoney:totalPlacedMoney,betsFilteredByDate,});});exports.getALLBets=factory.getAll(Bet);exports.getBet=factory.getOne(Bet);exports.getBetByName=catchAsync(async(req,res,next)=>{console.log('saminas');const betName=req.params.name;try{const bet=await Bet.find({userName:betName});if(!bet){return next(new AppError("No bets found",404));}
res.status(200).json({status:"Success",bet,});}catch(err){return next(new AppError("Invalid Entry",404));}});exports.updateTookPrizeMoney=catchAsync(async(req,res,next)=>{const betId=req.params.id;const doc=await Bet.findById(betId);if(doc.status!="win"){return next(new AppError("The user has not won the bet",404));}
const bet=await Bet.findByIdAndUpdate(betId,{tookPrizeMoney:true,},{runValidators:true,new:true,});if(!bet){return next(new AppError("No bets found",404));}
res.status(200).json({status:"success",bet,});});exports.updateBet=catchAsync(async(req,res,next)=>{const betId=req.params.id;const payed=req.body.payed;if(payed!=null){const bet1=await Bet.findById(betId);now=Date.now();if(now-new Date(bet1.createdAt)>1200000){await Bet.findByIdAndDelete(betId);return next(new AppError("Error betting, bet timeout",403));}
const bet=await Bet.findByIdAndUpdate(betId,{payed:payed,},{runValidators:true,new:true,});if(!bet){return next(new AppError("No bets found",404));}
res.status(200).json({status:"success",bet,});}else{return next(new AppError("specify condition",403));}});exports.updateStatusBet=catchAsync(async(req,res,next)=>{const betId=req.params.id;const status=req.body.status;const payedBet=await Bet.findById(betId);if(payedBet.payed!=true){return next(new AppError("The user has not paid for this bet",403));}
if(status!=null){const bet=await Bet.findByIdAndUpdate(betId,{status:status,},{runValidators:true,new:true,});if(!bet){return next(new AppError("No bets found",404));}
res.status(200).json({status:"success",bet,});}else{return next(new AppError("specify condition",403));}});exports.searchBet=catchAsync(async(req,res,next)=>{const bet=await Bet.find({userId:new RegExp(`${req.params.id}`,"i"),});if(!bet){return next(new AppError("No bets found",404));}
res.status(200).json({status:"Success",bet,});});exports.searchBetMobileApp=catchAsync(async(req,res,next)=>{const betId=req.params.customId;let MatchResult=[];const bet=await Bet.findOne({userId:new RegExp(`${betId}`,"i"),});if(!bet){return next(new AppError("No bets found",404));}
for(let i=0;i<bet.game.length;i++){const singleMatchId=bet.game[i].matchId;const singleMatchResult=await Result.find({matchId:singleMatchId,});if(singleMatchResult[0]==null){MatchResult.push({});}else{MatchResult.push(singleMatchResult[0]);}}
res.status(200).json({status:"success",result:bet.length,bet,MatchResult,});});exports.viewPayedBets=catchAsync(async(req,res,next)=>{const payedMatch=await Bet.find({payed:true});const payedMatchLength=payedMatch.length;let totalPayedMoney=0;let totalPrizeMoney=0;for(let i=0;i<payedMatchLength;i++){totalPayedMoney=totalPayedMoney+payedMatch[i].placedMoney;if(payedMatch[i].status=="win"){totalPrizeMoney=totalPrizeMoney+payedMatch[i].prizeMoney;}}
const payedBets=await Bet.aggregate([{$match:{payed:true,},},]);res.status(200).json({status:"success",payed:"true",result:payedBets.length,totalPlacedMoney:totalPayedMoney,payedBets,});});exports.viewUnPayedBets=catchAsync(async(req,res,next)=>{const unPayedMatch=await Bet.find({payed:false});const unPayedMatchLength=unPayedMatch.length;let totalUnPayedMoney=0;let totalPrizeMoney=0;for(let i=0;i<unPayedMatchLength;i++){totalUnPayedMoney=totalUnPayedMoney+unPayedMatch[i].placedMoney;if(unPayedMatch[i].status=="win"){totalPrizeMoney=totalPrizeMoney+unPayedMatch[i].prizeMoney;}}
const unpayedBets=await Bet.aggregate([{$match:{payed:false,},},]);res.status(200).json({status:"success",result:unpayedBets.length,totalUnpayedMoney:totalUnPayedMoney,unpayedBets,});});exports.betStats=catchAsync(async(req,res,next)=>{const payedMatch=await Bet.find({payed:true});const payedMatchLength=payedMatch.length;let totalpayedMoney=0;let totalprizedMoney=0;let totalMoneyWeGained=0;let totalMoneyLost=0;for(let i=0;i<payedMatchLength;i++){totalpayedMoney=totalpayedMoney+payedMatch[i].placedMoney;if(payedMatch[i].status=="won"){totalMoneyLost=totalMoneyLost+payedMatch[i].prizeMoney;}
if(payedMatch[i].status=="lost"){totalMoneyWeGained=totalMoneyWeGained+payedMatch[i].placedMoney;}
if(payedMatch[i].status=="won"){totalprizedMoney=totalprizedMoney+payedMatch[i].prizeMoney;}}
const bets=await Bet.aggregate([{$match:{payed:true,},},{$group:{_id:{$toUpper:"$status"},NumerofPerson:{$sum:1},totalPrizedMoney:{$sum:"$prizeMoney"},persons:{$push:"$userName",},betId:{$push:"$_id",},},},]);res.status(200).json({status:"success",payed:"true",totalPlacedMoney:totalpayedMoney,totalMoneyWeGained:totalMoneyWeGained,totalMoneyLost:totalMoneyLost,result:bets.length,bets,});});exports.viewWinBets=catchAsync(async(req,res,next)=>{const payedMatch=await Bet.find({payed:true});const payedMatchLength=payedMatch.length;let totalpayedMoney=0;let totalprizedMoney=0;for(let i=0;i<payedMatchLength;i++){totalpayedMoney=totalpayedMoney+payedMatch[i].placedMoney;if(payedMatch[i].status=="win"){totalprizedMoney=totalprizedMoney+payedMatch[i].prizeMoney;}}
const winBets=await Bet.aggregate([{$match:{status:"win",},},]);res.status(200).json({status:"success",totalprizedMoney:totalprizedMoney,result:winBets.length,winBets,});});exports.viewLoseBets=catchAsync(async(req,res,next)=>{const loseBets=await Bet.aggregate([{$match:{status:"lose"},},]);res.status(200).json({status:"success",result:loseBets.length,loseBets,});});exports.profit=catchAsync(async(req,res,next)=>{const payedMatch=await Bet.find({payed:true});const payedMatchLength=payedMatch.length;let totalpayedMoney=0;let totalprizedMoney=0;for(let i=0;i<payedMatchLength;i++){totalpayedMoney=totalpayedMoney+payedMatch[i].placedMoney;if(payedMatch[i].status=="win"){totalprizedMoney=totalprizedMoney+payedMatch[i].prizeMoney;}}
const profit=totalpayedMoney-totalprizedMoney;res.status(200).json({status:"success",totalPlacedMoney:totalpayedMoney,totalprizedMoney:totalprizedMoney,profit:profit,});});