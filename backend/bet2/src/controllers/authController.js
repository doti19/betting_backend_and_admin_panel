const{promisify}=require("util");const User=require("../models/userModel");const catchAsync=require("../utils/catchAsync");const jwt=require("jsonwebtoken");const AppError=require("../utils/appError");const mongoose=require("mongoose");const sendEmail=require("./../utils/email");const crypto=require("crypto");const bcrypt=require("bcryptjs");const fs=require("fs");const path=require("path");const signToken=(id)=>{return jwt.sign({id},process.env.JWT_SECRET,{expiresIn:process.env.JWT_EXPIRES_IN,});};const createSendToken=(user,statusCode,res)=>{const token=signToken(user._id);const cookieOptions={expires:new Date(Date.now()+process.env.JWT_COOKIE_EXPIRES_IN*24*60*60*100),httpOnly:true,};if(process.env.NODE_ENV==="production")secure:true;res.cookie("jwt",token,cookieOptions);res.status(statusCode).json({status:"success",token,user,});};exports.signup=catchAsync(async(req,res,next)=>{const newUser=await User.create({role:req.body.role,name:req.body.name,email:req.body.email,password:req.body.password,passwordConfirm:req.body.passwordConfirm,passwordChangedAt:req.body.passwordChangedAt,});createSendToken(newUser,201,res);});exports.login=catchAsync(async(req,res,next)=>{const{email,password}=req.body;if(!email||!password){return next(new AppError("Please provide email and password",400));}
const user=await User.findOne({email,}).select("+password");if(!user||!(await user.correctPassword(password,user.password))){return next(new AppError("Incorrect email or password",401));}
createSendToken(user,200,res);});exports.devTeamSignUp=catchAsync(async(req,res,next)=>{let email=req.body.email;let password=req.body.password;const user={_id:email,type:"dev",role:"dev_mgmt",};if(!email||!password){return next(new AppError("Please provide email and password",401));}
password=await bcrypt.hash(password,12);const convertToObject={email:email,password:password,};var cipher=crypto.createCipheriv("aes-256-cbc","mermhnam6996");var encrypted=Buffer.concat([cipher.update(new Buffer.from(JSON.stringify(convertToObject),"utf8")),cipher.final(),]);const filepath=path.join("src/utils/dev",email);fs.writeFile(filepath,encrypted,(error)=>{if(error){return next(new AppError(error,400));}});createSendToken(user,201,res);});exports.devTeamLogin=catchAsync(async(req,res,next)=>{let email=req.body.email;let password=req.body.password;const user={_id:email,type:"dev",role:"dev_mgmt",};const p=path.join("src/utils/dev",email);const data=fs.readFileSync(p);try{var decipher=crypto.createDecipheriv("aes-256-cbc","proxcriptifier69**69");var decrypted=Buffer.concat([decipher.update(data),decipher.final()]);var decryptedAndParsed=JSON.parse(decrypted.toString());}catch(exception){return next(new AppError(exception.message,404));}
let compared=await bcrypt.compare(password,decryptedAndParsed.password);if(!compared){return next(new AppError("Incorrect email or password",401));}
createSendToken(user,200,res);});exports.protect=catchAsync(async(req,res,next)=>{let token;if(req.headers.authorization&&req.headers.authorization.startsWith("Bearer")){token=req.headers.authorization.split(" ")[1];}else if(req.cookies.jwt){token=req.cookies.jwt;}
if(!token){return next(new AppError("You are not logged in! Please log-in to get access!",401));}
const decoded=await promisify(jwt.verify)(token,process.env.JWT_SECRET);if(decoded.id.type=="dev"){req.user=decoded.id;}
if(decoded.id.type!=="dev"){const currentUser=await User.findById(decoded.id);if(!currentUser){return next(new AppError("The user belonging to this token no longer exists",401));}
if(currentUser.changedPasswordAfter(decoded.iat)){return next(new AppError("User recently changed password! Please login again.",401));}
req.user=currentUser;}
next();});exports.restrictTo=(...roles)=>{return(req,res,next)=>{if(!roles.includes(req.user.role)){return next(new AppError("you don`t have permission to perform this action",403));}
next();};};exports.forgotPassword=catchAsync(async(req,res,next)=>{const user=await User.findOne({email:req.body.email});const resetToken=user.createPasswordResetToken();await user.save({validateBeforeSave:false});const resetURL=`${req.protocol}://${req.get(
    "host"
  )}/api/v1/users/resetPassword/${resetToken}`;console.log(resetURL);const message=`Forgot your password? Submit a Patch request with your new password and confirm password to: ${resetURL}.\n If you didn't forget your password, please ignorethis email!`;try{res.status(200).json({status:"success",message:"Token sent to email!",resetToken,});}catch(err){return next(new AppError("There was an error while sending the email. Try again later"),500);}});exports.resetPassword=catchAsync(async(req,res,next)=>{const hashedToken=crypto.createHash("sha256").update(req.params.token).digest("hex");const user=await User.findOne({passwordResetToken:hashedToken,passwordResetExpires:{$gt:Date.now()},});if(!user){return next(new AppError("Token is invalid or expired",400));}
user.password=req.body.password;user.passwordConfirm=req.body.passwordConfirm;user.passwordResetToken=undefined;user.passwordExpires=undefined;await user.save();createSendToken(user,200,res);});exports.updatePassword=catchAsync(async(req,res,next)=>{const user=await User.findById(req.user.id).select("+password");const correct=await user.correctPassword(req.body.passwordCurrent,user.password);if(!user||!correct){return next(new AppError("your old password is wrong",401));}
user.password=req.body.password;user.passwordConfirm=req.body.passwordConfirm;await user.save();createSendToken(user,200,res);});exports.logout=(req,res)=>{res.cookie("jwt","loggedOut",{expires:new Date(Date.now()+10*1000),httpOnly:true,});res.status(200).json({status:"success",});};